#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCity(City instance);
  partial void UpdateCity(City instance);
  partial void DeleteCity(City instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertState(State instance);
  partial void UpdateState(State instance);
  partial void DeleteState(State instance);
  partial void InsertUserData(UserData instance);
  partial void UpdateUserData(UserData instance);
  partial void DeleteUserData(UserData instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<City> Cities
	{
		get
		{
			return this.GetTable<City>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<State> States
	{
		get
		{
			return this.GetTable<State>();
		}
	}
	
	public System.Data.Linq.Table<UserData> UserDatas
	{
		get
		{
			return this.GetTable<UserData>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<long> _CityId;
	
	private System.Nullable<long> _StateId;
	
	private string _CityName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(System.Nullable<long> value);
    partial void OnCityIdChanged();
    partial void OnStateIdChanging(System.Nullable<long> value);
    partial void OnStateIdChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
	
	public City()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="BigInt")]
	public System.Nullable<long> CityId
	{
		get
		{
			return this._CityId;
		}
		set
		{
			if ((this._CityId != value))
			{
				this.OnCityIdChanging(value);
				this.SendPropertyChanging();
				this._CityId = value;
				this.SendPropertyChanged("CityId");
				this.OnCityIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="BigInt")]
	public System.Nullable<long> StateId
	{
		get
		{
			return this._StateId;
		}
		set
		{
			if ((this._StateId != value))
			{
				this.OnStateIdChanging(value);
				this.SendPropertyChanging();
				this._StateId = value;
				this.SendPropertyChanged("StateId");
				this.OnStateIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(MAX)")]
	public string CityName
	{
		get
		{
			return this._CityName;
		}
		set
		{
			if ((this._CityName != value))
			{
				this.OnCityNameChanging(value);
				this.SendPropertyChanging();
				this._CityName = value;
				this.SendPropertyChanged("CityName");
				this.OnCityNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<long> _CountryId;
	
	private string _CountryName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryIdChanging(System.Nullable<long> value);
    partial void OnCountryIdChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
	
	public Country()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="BigInt")]
	public System.Nullable<long> CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(50)")]
	public string CountryName
	{
		get
		{
			return this._CountryName;
		}
		set
		{
			if ((this._CountryName != value))
			{
				this.OnCountryNameChanging(value);
				this.SendPropertyChanging();
				this._CountryName = value;
				this.SendPropertyChanged("CountryName");
				this.OnCountryNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State")]
public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<long> _StateId;
	
	private string _StateName;
	
	private System.Nullable<long> _CountryId;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStateIdChanging(System.Nullable<long> value);
    partial void OnStateIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnCountryIdChanging(System.Nullable<long> value);
    partial void OnCountryIdChanged();
    #endregion
	
	public State()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="BigInt")]
	public System.Nullable<long> StateId
	{
		get
		{
			return this._StateId;
		}
		set
		{
			if ((this._StateId != value))
			{
				this.OnStateIdChanging(value);
				this.SendPropertyChanging();
				this._StateId = value;
				this.SendPropertyChanged("StateId");
				this.OnStateIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(MAX)")]
	public string StateName
	{
		get
		{
			return this._StateName;
		}
		set
		{
			if ((this._StateName != value))
			{
				this.OnStateNameChanging(value);
				this.SendPropertyChanging();
				this._StateName = value;
				this.SendPropertyChanged("StateName");
				this.OnStateNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="BigInt")]
	public System.Nullable<long> CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserData")]
public partial class UserData : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<long> _CityId;
	
	private System.Nullable<long> _StateId;
	
	private System.Nullable<long> _CountryId;
	
	private System.Nullable<long> _CategoryId;
	
	private string _NameOfThePlace;
	
	private System.Nullable<int> _Rating;
	
	private string _Comments;
	
	private System.Nullable<long> _UserId;
	
	private System.Nullable<System.DateTime> _DateOfEntry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(System.Nullable<long> value);
    partial void OnCityIdChanged();
    partial void OnStateIdChanging(System.Nullable<long> value);
    partial void OnStateIdChanged();
    partial void OnCountryIdChanging(System.Nullable<long> value);
    partial void OnCountryIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<long> value);
    partial void OnCategoryIdChanged();
    partial void OnNameOfThePlaceChanging(string value);
    partial void OnNameOfThePlaceChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnUserIdChanging(System.Nullable<long> value);
    partial void OnUserIdChanged();
    partial void OnDateOfEntryChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfEntryChanged();
    #endregion
	
	public UserData()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="BigInt")]
	public System.Nullable<long> CityId
	{
		get
		{
			return this._CityId;
		}
		set
		{
			if ((this._CityId != value))
			{
				this.OnCityIdChanging(value);
				this.SendPropertyChanging();
				this._CityId = value;
				this.SendPropertyChanged("CityId");
				this.OnCityIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="BigInt")]
	public System.Nullable<long> StateId
	{
		get
		{
			return this._StateId;
		}
		set
		{
			if ((this._StateId != value))
			{
				this.OnStateIdChanging(value);
				this.SendPropertyChanging();
				this._StateId = value;
				this.SendPropertyChanged("StateId");
				this.OnStateIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="BigInt")]
	public System.Nullable<long> CountryId
	{
		get
		{
			return this._CountryId;
		}
		set
		{
			if ((this._CountryId != value))
			{
				this.OnCountryIdChanging(value);
				this.SendPropertyChanging();
				this._CountryId = value;
				this.SendPropertyChanged("CountryId");
				this.OnCountryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="BigInt")]
	public System.Nullable<long> CategoryId
	{
		get
		{
			return this._CategoryId;
		}
		set
		{
			if ((this._CategoryId != value))
			{
				this.OnCategoryIdChanging(value);
				this.SendPropertyChanging();
				this._CategoryId = value;
				this.SendPropertyChanged("CategoryId");
				this.OnCategoryIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfThePlace", DbType="NVarChar(MAX)")]
	public string NameOfThePlace
	{
		get
		{
			return this._NameOfThePlace;
		}
		set
		{
			if ((this._NameOfThePlace != value))
			{
				this.OnNameOfThePlaceChanging(value);
				this.SendPropertyChanging();
				this._NameOfThePlace = value;
				this.SendPropertyChanged("NameOfThePlace");
				this.OnNameOfThePlaceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
	public System.Nullable<int> Rating
	{
		get
		{
			return this._Rating;
		}
		set
		{
			if ((this._Rating != value))
			{
				this.OnRatingChanging(value);
				this.SendPropertyChanging();
				this._Rating = value;
				this.SendPropertyChanged("Rating");
				this.OnRatingChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
	public string Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			if ((this._Comments != value))
			{
				this.OnCommentsChanging(value);
				this.SendPropertyChanging();
				this._Comments = value;
				this.SendPropertyChanged("Comments");
				this.OnCommentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
	public System.Nullable<long> UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfEntry", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfEntry
	{
		get
		{
			return this._DateOfEntry;
		}
		set
		{
			if ((this._DateOfEntry != value))
			{
				this.OnDateOfEntryChanging(value);
				this.SendPropertyChanging();
				this._DateOfEntry = value;
				this.SendPropertyChanged("DateOfEntry");
				this.OnDateOfEntryChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
